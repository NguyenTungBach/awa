<?php
/**
 * Created by VeHo.
 * Year: 2023-08-01
 */

namespace Repository;

use App\Http\Resources\CashInResource;
use App\Models\CashIn;
use App\Models\CashInStatical;
use App\Models\Customer;
use App\Models\FinalClosingHistories;
use App\Repositories\Contracts\CashInRepositoryInterface;
use Carbon\Carbon;
use Illuminate\Http\Response;
use Repository\BaseRepository;
use Illuminate\Foundation\Application;
use Illuminate\Support\Facades\Auth;

class CashInRepository extends BaseRepository implements CashInRepositoryInterface
{

     public function __construct(Application $app)
     {
         parent::__construct($app);

     }

    /**
       * Instantiate model
       *
       * @param CashIn $model
       */

    public function model()
    {
        return CashIn::class;
    }

    public function create(array $attributes)
    {
        //Lấy thông tin closing_date để lấy khoảng hạn thanh toán
        //Tách ngày thanh toán để lấy tháng năm
        $customer = Customer::find($attributes["customer_id"]);
        $closing_dateStart = $this->getClosing_dateStart($customer->closing_date,$attributes['payment_date']);
        $closing_dateEnd = $this->getClosing_dateEnd($customer->closing_date,$attributes['payment_date']);

        $month_year = Carbon::parse($attributes['payment_date'])->format("Y-m");
        //Kiểm tra ngày payment_date có nằm trong ngày chốt lịch final_closing_histories
        $checkFinalClosingHistories = FinalClosingHistories::where('month_year', $month_year)
            ->exists();
        if ($checkFinalClosingHistories){
            return $this->responseJson(Response::HTTP_UNPROCESSABLE_ENTITY, trans('errors.final_closing_histories',[
                "attribute"=> $attributes['payment_date']
            ]));
        }

        //Kiểm tra nếu payment_date của customer_id này đã tồn tại rồi thì không được tạo
        $checkCashInPayment = CashIn::
        where("payment_date",$attributes['payment_date'])
        ->where("customer_id",$attributes['customer_id'])
        ->first();

        if ($checkCashInPayment){
            return $this->responseJson(Response::HTTP_UNPROCESSABLE_ENTITY, trans('errors.unique',[
                "attribute"=> $attributes['payment_date']
            ]));
        }

        // Lưu tiền cash-in
        CashIn::create([
            "customer_id" => $attributes["customer_id"],
            "cash_in" => $attributes["cash_in"],
            "payment_method" => $attributes["payment_method"],
            "payment_date" => $attributes["payment_date"],
            "status" => 1,
        ]);

        // Vì số tiền CashInStatical đã được cập nhật hoặc tạo trong driver_course
        // Truy vấn cập nhật tiền CashInStatical theo customer_id và theo month_line

        $cashInStatical = CashInStatical::where()->first();

        // Truy vấn tổng tất cả cash-in có trong khoảng closing date để cập nhật tiền cash-in-statics
        $cashIns = CashIn::
        whereBetween('payment_date', [$closing_dateStart,$closing_dateEnd])
            ->get();

        return $this->responseJson(200, new CashInResource($attributes)); // TODO: Change the autogenerated stub
    }

    public function getClosing_dateStart($closing_date,$payment_date){
        switch ($closing_date){
            case 1:
                $month_year = Carbon::parse($payment_date)->subMonth()->format("Y-m");
                return Carbon::parse($month_year."-16")->format("Y-m-d");
            case 2:
                $month_year = Carbon::parse($payment_date)->subMonth()->format("Y-m");
                return Carbon::parse($month_year."-21")->format("Y-m-d");
            case 3:
                $month_year = Carbon::parse($payment_date)->subMonth()->format("Y-m");
                return Carbon::parse($month_year."-26")->format("Y-m-d");
            case 4:
                $month_year = Carbon::parse($payment_date)->format("Y-m");
                return Carbon::createFromFormat('Y-m', $month_year)->startOfMonth()->format("Y-m-d");
        }
    }

    public function getClosing_dateEnd($closing_date,$payment_date){
        switch ($closing_date){
            case 1:
                $month_year = Carbon::parse($payment_date)->format("Y-m");
                return Carbon::parse($month_year."-15")->format("Y-m-d");
            case 2:
                $month_year = Carbon::parse($payment_date)->format("Y-m");
                return Carbon::parse($month_year."-20")->format("Y-m-d");
            case 3:
                $month_year = Carbon::parse($payment_date)->format("Y-m");
                return Carbon::parse($month_year."-25")->format("Y-m-d");
            case 4:
                $month_year = Carbon::parse($payment_date)->format("Y-m");
                return Carbon::createFromFormat('Y-m', $month_year)->endOfMonth()->format("Y-m-d");
        }
    }
}
